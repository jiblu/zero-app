{"version":3,"sources":["Themes/Colors.js","Themes/Metrics.js","Components/Header.js","Components/Pins.js","Components/Info.js","Components/DriverInfo.js","Components/Map.js","App.js","serviceWorker.js","index.js"],"names":["colors","lightGray","darkGray","accent","metrics","fontSize","smaller","small","medium","large","Themes","HeaderStyle","styled","div","Header","props","href","alt","src","Pins","this","data","onClick","map","city","index","key","longitude","latitude","height","viewBox","style","cursor","fill","stroke","transform","d","PureComponent","InfoStyle","LabelStyle","TextStyle","Info","text","label","DriverStyle","DriverInfo","info","displayName","driver","Object","keys","status","item","i","JSON","stringify","fullscreenControlStyle","position","top","left","padding","navStyle","scaleControlStyle","bottom","Map","_updateViewport","viewport","setState","_onClickMarker","popupInfo","state","width","zoom","tipSize","anchor","closeOnClick","onClose","mapStyle","onViewportChange","mapboxApiAccessToken","process","DRIVERS","_renderPopup","Component","App","class","Boolean","window","location","hostname","match","require","config","path","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.257d0f56.chunk.js","sourcesContent":["const colors = {\n  lightGray: '#A9A9A9',\n  darkGray: '#333333',\n  accent: '#18c6b3'\n}\n\nexport default colors","const metrics = {\n  fontSize: {\n    smaller: '10px',\n    small: '12px',\n    medium: '14px',\n    large: '16px'\n  }\n}\n\nexport default metrics\n","import React from 'react'\nimport styled from 'styled-components'\nimport * as Themes from '../Themes/index'\n\nconst {\n  lightGray\n} = Themes.Colors\n\nconst HeaderStyle = styled.div`\n  background-color: ${lightGray}\n`\n\nconst Header = props => {\n  return (\n    <HeaderStyle>\n      <a href='/'>\n        <img alt='logo' src='https://storage.googleapis.com/zeroshop-cdn/site/img/logo3.png' />\n      </a>\n    </HeaderStyle>\n  )\n}\n\nexport default Header\n","import React, { PureComponent } from 'react'\nimport { Marker } from 'react-map-gl'\nimport * as Themes from '../Themes/index'\n\nconst { accent } = Themes.Colors\n\nconst ICON = 'M 20 8 h -3 V 4 H 3 c -1.1 0 -2 0.9 -2 2 v 11 h 2 c 0 1.66 1.34 3 3 3 s 3 -1.34 3 -3 h 6 c 0 1.66 1.34 3 3 3 s 3 -1.34 3 -3 h 2 v -5 l -3 -4 Z M 6 18.5 c -0.83 0 -1.5 -0.67 -1.5 -1.5 s 0.67 -1.5 1.5 -1.5 s 1.5 0.67 1.5 1.5 s -0.67 1.5 -1.5 1.5 Z m 13.5 -9 l 1.96 2.5 H 17 V 9.5 h 2.5 Z m -1.5 9 c -0.83 0 -1.5 -0.67 -1.5 -1.5 s 0.67 -1.5 1.5 -1.5 s 1.5 0.67 1.5 1.5 s -0.67 1.5 -1.5 1.5 Z'\n\nconst SIZE = 20\n\nexport default class Pins extends PureComponent {\n  render () {\n    const { data, onClick } = this.props\n\n    return data.map((city, index) => (\n      <Marker key={`marker-${index}`} longitude={city.longitude} latitude={city.latitude}>\n        <svg\n          height={SIZE}\n          viewBox='0 0 24 24'\n          style={{\n            cursor: 'pointer',\n            fill: accent,\n            stroke: 'none',\n            transform: `translate(${-SIZE / 2}px,${-SIZE}px)`\n          }}\n          onClick={() => onClick(city)}\n        >\n          <path d={ICON} />\n        </svg>\n      </Marker>\n    ))\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport * as Themes from '../Themes/index'\n\nconst {\n  lightGray,\n  darkGray\n} = Themes.Colors\n\nconst {\n  smaller,\n  small\n} = Themes.Metrics.fontSize\n\nconst InfoStyle = styled.div`\n  padding: 1px\n`\nconst LabelStyle = styled.div`\n  color: ${lightGray};\n  font-size: ${smaller}\n`\nconst TextStyle = styled.div`\n  color: ${darkGray};\n  font-size: ${small}\n`\nconst Info = props => {\n  return (\n    <InfoStyle>\n      <TextStyle>\n        {props.text}\n      </TextStyle>\n      <LabelStyle>\n        {props.label}\n      </LabelStyle>\n    </InfoStyle>\n  )\n}\n\nexport default Info\n","import React, { PureComponent } from 'react'\nimport Info from './Info'\nimport styled from 'styled-components'\nimport * as Themes from '../Themes/index'\n\nconst { large } = Themes.Metrics.fontSize\n\nconst DriverStyle = styled.div`\n  font-size: ${large};\n  padding-bottom: 10px;\n  color: ${Themes.Colors.accent}\n`\n\nexport default class DriverInfo extends PureComponent {\n  render () {\n    const { info } = this.props\n    const displayName = `${info.driver}`\n\n    return (\n      <div>\n        <DriverStyle>\n          {displayName}\n        </DriverStyle>\n        {Object.keys(info.status).map((item, i) => {\n          return (\n            <div key={i}>\n              <Info label={item} text={JSON.stringify(info.status[item])} />\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react'\nimport ReactMapGL, {Popup, NavigationControl, FullscreenControl, ScaleControl} from 'react-map-gl'\n\nimport Pins from './Pins'\nimport DriverInfo from './DriverInfo'\n\nimport DRIVERS from '../Data/drivers.json'\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAP_GL_TOKEN\n\nconst fullscreenControlStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  padding: '10px'\n}\n\nconst navStyle = {\n  position: 'absolute',\n  top: 36,\n  left: 0,\n  padding: '10px'\n}\n\nconst scaleControlStyle = {\n  position: 'absolute',\n  bottom: 36,\n  left: 0,\n  padding: '10px'\n}\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        latitude: 37.7577,\n        longitude: -122.4376,\n        width: '100vw',\n        height: '100vh',\n        zoom: 11,\n      },\n      popupInfo: null\n    }\n  }\n\n  _updateViewport = viewport => {\n    this.setState({viewport})\n  }\n\n  _onClickMarker = driver => {\n    this.setState({popupInfo: driver})\n  }\n\n  _renderPopup() {\n    const {popupInfo} = this.state\n\n    return (\n      popupInfo && (\n        <Popup\n          tipSize={5}\n          anchor=\"top\"\n          longitude={popupInfo.longitude}\n          latitude={popupInfo.latitude}\n          closeOnClick={true}\n          onClose={() => this.setState({popupInfo: null})}\n        >\n          <DriverInfo info={popupInfo} />\n        </Popup>\n      )\n    )\n  }\n  render() {\n    const {viewport} = this.state;\n    \n    return (\n      <ReactMapGL\n      {...viewport}\n      width='100%'\n      height='100%'\n      mapStyle=\"mapbox://styles/mapbox/dark-v9\"\n      onViewportChange={this._updateViewport}\n      mapboxApiAccessToken={MAPBOX_TOKEN}\n      >\n        <Pins data={DRIVERS} onClick={this._onClickMarker} />\n\n        {this._renderPopup()}\n\n        <div style={fullscreenControlStyle}>\n          <FullscreenControl />\n        </div>\n        <div style={navStyle}>\n          <NavigationControl />\n        </div>\n        <div style={scaleControlStyle}>\n          <ScaleControl />\n        </div>\n\n      </ReactMapGL>\n    )\n  }\n}\n\nexport default Map\n","import React from 'react'\nimport './App.css'\nimport Header from './Components/Header'\nimport Map from './Components/Map'\n\nfunction App () {\n  return (\n    <div class='App'>\n      <Header />\n      <Map />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nrequire('dotenv').config({ path: '.env' })\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}